{"version":3,"sources":["js/wasmHandler.js","js/app.js"],"names":["combineMultithreadedData","ctx","multithreadingWorkers","multithreadingAmount","navigator","hardwareConcurrency","webworkerLoaded","w","Promise","r","addEventListener","once","setHandlerSetting","name","val","setWorkerSettings","i","postMessage","cloneWorkerSettings","init","_ctx","loadingCallback","loads","worker","Worker","onmessage","handleMultithreaderReturn","push","combineImageData","combineImageDataIndex","e","data","width","height","startX","imageData","ImageData","putImageData","renderFrame","xCam","yCam","scale","Array","stripWidth","Math","floor","waits","all","canvas","fps","scaleFactor","frame","keys","scaleCanvas","window","innerWidth","innerHeight","style","loadingEl","document","getElementById","getContext","WasmHandler","x","textContent","className","onresize","oncontextmenu","preventDefault","onkeydown","key","toLowerCase","onkeyup","dragging","lastDragX","lastDragY","scaleX","scaleY","y","onmousedown","mouseDownHandler","clientX","clientY","onmousemove","mouseMoveHandler","onmouseup","mouseUpHandler","onwheel","wheelHandler","console","log","zoom","deltaY","mouseInMandelBeforeX","mouseInMandelBeforeY","lastUpdateTime","performance","now","panAmount","scalePanAmount","debugEl","resScaleEl","oninput","value","maxIterationEl","linesBetweenEl","checked","combineDataEl","update","timeNow","deltaTime","round","receivingGoodInput","drawDebug","toFixed","requestAnimationFrame"],"mappings":"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","file":"app.05979472.js","sourceRoot":"../src","sourcesContent":["export let combineMultithreadedData = true;\n\nlet multithreadingWorkers = [];\nexport let multithreadingAmount = navigator.hardwareConcurrency || 4; // Use 4 if can't get CPU core / thread count\nlet ctx;\n\n/*let linesBetweenColumns = false;\nexport function setLinesBetweenColumns(val) { // Allowing setting it externally\n  linesBetweenColumns = val;\n}*/\n\nconst webworkerLoaded = w => new Promise(r => w.addEventListener(\"message\", r, { once: true }));\n\nexport async function setHandlerSetting(name, val) {\n  switch (name) {\n    case 'combineMultithreadedData':\n      combineMultithreadedData = val;\n      break;\n  }\n}\n\nexport async function setWorkerSettings(name, val) {\n  for (let i = 0; i < multithreadingAmount; i++) {\n    multithreadingWorkers[i].postMessage([name, val]);\n  }\n\n  cloneWorkerSettings[name] = val;\n}\n\nexport async function init(_ctx, loadingCallback = () => {}) {\n  loadingCallback('Loading multithreading workers');\n\n  ctx = _ctx;\n\n  let loads = [];\n  for (let i = 0; i < multithreadingAmount; i++) {\n    loadingCallback(`Spawning worker ${i + 1}`);\n\n    let worker = new Worker('wasmMultithread.js');\n\n    worker.onmessage = handleMultithreaderReturn;\n\n    multithreadingWorkers.push(worker);\n    loads.push(webworkerLoaded(worker));\n  }\n\n  //let startTime = performance.now();\n\n  for (let i = 0; i < multithreadingAmount; i++) {\n    loadingCallback(`Waiting for worker ${i + 1} to load`);\n    await loads[i];\n  }\n\n  loadingCallback('Loaded all multithreading workers');\n\n  //await Promise.all(loads);\n\n  //console.log(`${(performance.now() - startTime).toFixed(2)}ms`);\n\n  //await (new Promise(resolve => setTimeout(resolve, 1000)));\n}\n\nlet combineImageData;\nlet combineImageDataIndex;\nfunction handleMultithreaderReturn(e) {\n  if (e.data === 'loaded') return;\n\n  let [i, width, height, data] = e.data;\n\n  let startX = (i * width);\n\n  let imageData = new ImageData(data, width, height);\n\n  if (combineMultithreadedData) {\n    combineImageData[combineImageDataIndex] = [imageData, startX];\n    combineImageDataIndex++;\n\n    if (combineImageDataIndex === multithreadingAmount) {\n      for (let i = 0; i < multithreadingAmount; i++) {\n        ctx.putImageData(combineImageData[i][0], combineImageData[i][1], 0);\n      }\n    }\n\n    return;\n  }\n\n  ctx.putImageData(imageData, startX, 0);\n}\n\nexport async function renderFrame(width, height, xCam, yCam, scale) {\n  combineImageData = Array(multithreadingAmount);\n  combineImageDataIndex = 0;\n\n  let stripWidth = Math.floor(width / multithreadingAmount);\n\n  //let stripCurrent = 0;\n  let waits = [];\n  for (let i = 0; i < multithreadingAmount; i++) {\n    multithreadingWorkers[i].postMessage([i, stripWidth, width, height, xCam, yCam, scale]);\n\n    //stripCurrent += stripWidth;\n\n    waits.push(webworkerLoaded(multithreadingWorkers[i]));\n  }\n\n  await Promise.all(waits);\n\n  //module.render_frame(ctx, width, height, xCam, yCam, scale);\n}","import * as WasmHandler from './wasmHandler';\n\n(async function () { let canvas, ctx;\n\nlet scaleFactor = 2;\n\nlet width = 0;\nlet height = 0;\n\nlet frame = 0;\nlet fps;\n\nlet xCam = 0;\nlet yCam = 0;\n\nlet scale = 1.2;\n\nlet keys = [];\n\nfunction scaleCanvas() {\n  width = Math.floor(window.innerWidth / scaleFactor);\n  height = Math.floor(window.innerHeight / scaleFactor);\n\n  canvas.width = width;\n  canvas.height = height;\n\n  canvas.style.width = `${window.innerWidth}px`;\n  canvas.style.height = `${window.innerHeight}px`;\n}\n\nlet loadingEl = document.getElementById('loading');\n\ncanvas = document.getElementById('canvas');\nctx = canvas.getContext('2d');\n\nWasmHandler.init(ctx, (x) => {\n  loadingEl.textContent = x;\n\n  if (x === 'Loaded all multithreading workers') {\n    loadingEl.className = 'hide';\n  }\n});\n\nscaleCanvas();\nwindow.onresize = scaleCanvas;\n  \ndocument.oncontextmenu = function(e) {\n  e.preventDefault();\n  return false;\n}\n  \ndocument.onkeydown = function(e) {\n  let key = e.key.toLowerCase();\n\n  keys[key] = true;\n};\n\ndocument.onkeyup = function(e) {\n  let key = e.key.toLowerCase();\n    \n  keys[key] = false;\n};\n\nlet dragging = false;\nlet lastDragX = 0;\nlet lastDragY = 0;\n\nfunction mouseDownHandler(e) {\n  dragging = true;\n\n  lastDragX = e.clientX;\n  lastDragY = e.clientY;\n\n  //WasmHandler.setHandlerSetting('combineMultithreadedData', true);\n}\n\nfunction mouseMoveHandler(e) {\n  if (!dragging) return;\n\n  let x = e.clientX;\n  let y = e.clientY;\n\n  let diffX = x - lastDragX;\n  let diffY = y - lastDragY;\n\n  xCam -= diffX / 400;\n  yCam -= diffY / 400;\n\n  lastDragX = x;\n  lastDragY = y;\n}\n\nfunction mouseUpHandler(e) {\n  dragging = false;\n\n  //WasmHandler.setHandlerSetting('combineMultithreadedData', false);\n}\n\nfunction scaleX(x) {\n  return ((x / (width / 3.5)) - 1.75) * scale + xCam;\n}\n\nfunction scaleY(y) {\n  return (((y / (height / 2.0)) - 1.0)) * scale + yCam;\n}\n\nfunction wheelHandler(e) {\n  console.log(e);\n\n  let zoom = (e.deltaY * 0.001);\n\n  //xCam -= ((scaleX(e.clientX / scaleFactor) * zoom) - xCam) / scaleFactor;\n\n  let mouseInMandelBeforeX = scaleX(e.clientX / scaleFactor) - xCam;\n  let mouseInMandelBeforeY = scaleY(e.clientY / scaleFactor) - yCam;\n\n  //console.log(mouseInMandelBeforeX);\n\n  scale *= 1 + zoom;\n\n  xCam -= (scaleX(e.clientX / scaleFactor) - xCam) - mouseInMandelBeforeX;\n\n  yCam -= (scaleY(e.clientY / scaleFactor) - yCam) - mouseInMandelBeforeY;\n\n  //let diffX = (scaleX(e.clientX / scaleFactor) - xCam) + mouseInMandelBeforeX;\n  //console.log(diffX)\n\n  //xCam += diffX;\n\n  //xCam -= scaleX(e.clientX) * zoom / scaleFactor;\n\n  //xCam = xCam - scaleX(e.clientX / window.innerWidth * (sWidthAfter - sWidthBefore));\n  //yCam = yCam - scaleY(e.clientY / window.innerHeight * (sHeightAfter - sHeightBefore));\n\n  e.preventDefault();\n}\n\ncanvas.onmousedown = mouseDownHandler;\ncanvas.onmousemove = mouseMoveHandler;\ncanvas.onmouseup = mouseUpHandler;\n\ncanvas.onwheel = wheelHandler;\n\nlet lastUpdateTime = performance.now();\n\nlet panAmount = 0.02;\n\nfunction scalePanAmount() {\n  return panAmount * scale;\n}\n\nasync function update() {\n  let timeNow = performance.now();\n  let deltaTime = (timeNow - lastUpdateTime) / 1000;\n  lastUpdateTime = timeNow;\n\n  fps = Math.round(1 / deltaTime);\n\n  let receivingGoodInput = false;\n\n  if (keys['w'] || keys['arrowup']) {\n    yCam -= scalePanAmount();\n\n    receivingGoodInput = true;\n  }\n\n  if (keys['s'] || keys['arrowdown']) {\n    yCam += scalePanAmount();\n\n    receivingGoodInput = true;\n  }\n\n  if (keys['a'] || keys['arrowleft']) {\n    xCam -= scalePanAmount();\n\n    receivingGoodInput = true;\n  }\n\n  if (keys['d'] || keys['arrowright']) {\n    xCam += scalePanAmount();\n\n    receivingGoodInput = true;\n  }\n\n  if (keys['z']) {\n    scale *= 0.99;\n\n    receivingGoodInput = true;\n  }\n\n  if (keys['x']) {\n    scale *= 1.01;\n\n    receivingGoodInput = true;\n  }\n\n  await WasmHandler.renderFrame(width, height, xCam, yCam, scale);\n\n  frame++;\n\n  drawDebug();\n\n  requestAnimationFrame(update);\n}\n\nlet debugEl = document.getElementById('debug');\n\nlet resScaleEl = document.getElementById('resScale');\n\nresScaleEl.oninput = () => {\n  scaleFactor = resScaleEl.value;\n\n  scaleCanvas();\n};\n\nlet maxIterationEl = document.getElementById('maxIteration');\n\nmaxIterationEl.oninput = () => {\n  WasmHandler.setWorkerSettings('maxIteration', maxIterationEl.value);\n  WasmHandler.setWorkerSettings('maxIterationColorScale', 255 / maxIterationEl.value);\n\n  //scaleFactor = resScaleEl.value;\n\n  //scaleCanvas();\n};\n\nlet linesBetweenEl = document.getElementById('linesBetween');\n\nlinesBetweenEl.oninput = () => {\n  WasmHandler.setWorkerSettings('linesBetweenMultithreadColumns', linesBetweenEl.checked);\n};\n\nlet combineDataEl = document.getElementById('combineData');\n\ncombineDataEl.oninput = () => {\n  WasmHandler.setHandlerSetting('combineMultithreadedData', combineDataEl.checked);\n};\n\nasync function drawDebug() {\n  debugEl.textContent = `F: ${frame} FPS: ${fps}\nCamera Position: ${xCam.toFixed(2)}, ${yCam.toFixed(2)} Scale: ${scale.toFixed(2)}\nResolution: Scaled: ${width}x${height}, Scale Factor: ${scaleFactor}, Raw: ${window.innerWidth}x${window.innerHeight}\nMultithreading: Workers: ${WasmHandler.multithreadingAmount}, Combine Multithreaded Data: ${WasmHandler.combineMultithreadedData}\n`;\n}\n\nupdate();\n})();"]}